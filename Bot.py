import telebot
import json
from telebot import types
import ast
from datetime import datetime
from threading import Thread
import asyncio
import re
import os
import time
from collections import defaultdict
from telebot import types
from googletrans import Translator
from main import get_holidays  # —Ñ—É–Ω–∫—Ü–∏—è, –ø–∞—Ä—Å–∏—é—â–∞—è –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã
from date_formating import regex_date  # —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –¥–∞—Ç—É, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è –µ–µ

bot = telebot.TeleBot(os.environ['TELEGRAM_TOKEN'])

lkjaksldf
adfja;df
lkadjsfla;klf
# —è–∑—ã–∫ –±–æ—Ç–∞
global LANGUAGE
LANGUAGE = 'Inglish'
# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É
buttonsList = defaultdict(str, {
    "correct_date_button": {"Date settings": ['Current date', 'Change the date']},
    "language_button": {'Language': ['–†—É—Å—Å–∫–∏–π', 'Inglish']},
    "search_button": {"Search": ['Search by current date', 'Search by the specified date']},
})  # –º–Ω–æ–≥–æ–∫–ª—é—á–µ–≤–æ–π –æ–±—å–µ–∫—Ç dict
markup_finish = ["Back to menu", "Stop"]

# –≤–æ–∑—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á –ø–æ —Ç–∏–ø—É str
def key_from_dict(value):
    key = str([x for x in value.keys()]).strip("['']")
    return key


# –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def translator(text):
    translator = lambda tx: Translator().translate(tx, dest='ru').text.strip("'[]'")
    return translator(text) if LANGUAGE == '–†—É—Å—Å–∫–∏–π' else text


# —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
def keyboard_translator(key):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥—è–ª–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª—é—á–µ–π buttonList
    –∏ —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π LANGUAGE
    :param key: —Å–∞–º –∫–ª—é—á
    :return:
    """
    if key == 'Date settings':
        answer = 'Select the desired settings'
        return translator(answer)

    elif key == 'Language':
        answer = 'Select the desired language'
        return translator(answer)

    elif key == 'Search':
        answer = 'Choose a search method'
        return translator(answer)
    elif key == 'Search by current date':
        answer = "What\'s next?"
        return translator(answer)
    else:
        return None


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def makeKeyboard(text=None, orig_req=None, message=None, finish=False):
    global LANGUAGE
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param orig_req: –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∫–Ω–æ–ø–æ–∫, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ > 1 –∫–ª—é—á–∞
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    :param finish: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤–∫–ª—é—á–∞–µ—Ç—å –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–µ—Ç
    :return: InlineKeyBoard (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
    """

    def animation_bar(message):
        CLOCKS = {
            "üïê": "One O‚ÄôClock", "üïë": "Two O‚ÄôClock", "üïí": "Three O‚ÄôClock",
            "üïì": "Four O‚ÄôClock", "üïî": "Five O‚ÄôClock", "üïï": "Six O‚ÄôClock",
            "üïñ": "Seven O‚ÄôClock", "üïó": "Eight O‚ÄôClock", "üïò": "Nine O‚ÄôClock",
            "üïô": "Ten O‚ÄôClock", "üïö": "Eleven O‚ÄôClock", "üïõ": "Twelve O‚ÄôClock",
        }

        bot.send_message(chat_id=CHAT_ID, text="üïõ")
        while True:
            for clock in CLOCKS:
                if OVER:
                    print('whaaa?')
                    return bot.delete_message(
                        chat_id=CHAT_ID,
                        message_id=message.message_id + 1
                    )
                bot.edit_message_text(chat_id=CHAT_ID,
                                      message_id=message.message_id + 1,
                                      text=clock)
                time.sleep(0.1)


    def threading_load(thread, over):
        global OVER
        OVER = None
        for tp in (thread, over):
            assert type(tp) == tuple
            assert type(tp[1]) == dict
        thread_func = thread[0]
        over_func = over[0]
        over_args = dict()
        thread_args = []

        for key, value in over[1].items():
            if type(value) == dict:
                for k,v in value.items():
                    key_arg = key
                    over_args_func = (k,v)
            else:
                over_args[key] = value

        for value in thread[1].values():
            thread_args.append(value)
        thread_args = tuple(thread_args)


        print(over_func.__code__.co_varnames)
        th = Thread(target=thread_func,
                    args=(thread_args))

        th.start()
        OVER = over_func(chat_id=CHAT_ID, text=get_holidays(LANGUAGE)) # key_arg = over_args_func[0](over_args_func[1])

        th.join()




    markup = types.InlineKeyboardMarkup()

    # –µ—Å–ª–∏ –æ–ø—Ü. –∞–≥—Ä—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (not text) and (not finish):
        # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–ª—è –Ω–∞–¥–ø–∏—Å–µ–π –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö callback'–æ–≤
        for key, value in buttonsList.items():
            #  –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å–ª–æ–≤–∞—Ä—å, —Ç–æ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á
            if type(value) == dict:
                value_key = key_from_dict(value)

                markup.add(types.InlineKeyboardButton(text=translator(value_key),
                                                      callback_data=key))
            else:
                markup.add(types.InlineKeyboardButton(text=translator(value),
                                                      callback_data=key))
        return markup  # –≤–æ–∑—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardMarkup()


    elif finish:
        def markup_finish():
            """
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—â–∞—é–µ–≥–æ –º–µ–Ω—é
            :return: InlineKeyBoard (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
            """
            global markup_finish
            markup_finish = ["Back to menu", "Finish"]
            for v in markup_finish:
                markup.add(types.InlineKeyboardButton(text=translator(v) if LANGUAGE == '–†—É—Å—Å–∫–∏–π' else v,
                                                      callback_data=v + '_button'))
            return markup

        if text == 'Back to menu_button':
            print(text)
            answer = "I\'m coming back..."
            # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç-–æ–∂–∏–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.send_message(chat_id=CHAT_ID,
                             text=translator(answer))
            time.sleep(2)
            # –±–æ—Ç —É–¥–∞–ª—è–µ—Ç –æ—Ç–≤–µ—Ç-–æ–∂–∏–¥–∞–Ω–∏–µ –∏ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.delete_message(chat_id=CHAT_ID,
                               message_id=message.message_id + 1,  # —Ç.–∫. message_id —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω–æ,
                               # —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ id –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–∞–≤–Ω–æ –∫–æ–ª-–≤—É —Å–æ–æ–±—â–µ–Ω–∏–µ–π,
                               # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                               )
            # –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            answer = "Choose the desired setting"
            bot.send_message(chat_id=CHAT_ID, text=answer,
                             reply_markup=makeKeyboard(),
                             parse_mode='HTML')

        elif text == 'Finish_button':
            answer = 'Just send any symbol or command so that I can contact you again!'

        else:
            return markup_finish()


    elif text == 'Language':
        for v in buttonsList[orig_req][text]:
            markup.add(types.InlineKeyboardButton(text=v,
                                                  callback_data=v + '_button'))
        return markup

    elif re.findall(('–†—É—Å—Å–∫–∏–π_button|Inglish_button'), text):
        if text.split('_')[0] == "–†—É—Å—Å–∫–∏–π":
            LANGUAGE = '–†—É—Å—Å–∫–∏–π'
        else:
            LANGUAGE = 'Inglish'
        answer = 'Change language...'
        animation_bar(message, translator(answer))
        answer = "Choose the desired setting"

        bot.delete_message(chat_id=CHAT_ID, message_id=message.message_id + 1)
        return bot.send_message(chat_id=CHAT_ID, text=translator(answer),
                                reply_markup=makeKeyboard())

    elif text == 'Date settings':
        for v in buttonsList[orig_req][text]:
            markup.add(types.InlineKeyboardButton(text=translator(v) if LANGUAGE == '–†—É—Å—Å–∫–∏–π' else v,
                                                  callback_data=v + '_button'))
        return markup

    elif text == 'Current date_button':
        year = '\a' + datetime.today().ctime().split()[-1]
        bot.send_message(chat_id=CHAT_ID,
                         text=" ".join(language_date()) + year if LANGUAGE == '–†—É—Å—Å–∫–∏–π' \
                             else " ".join(datetime.today().ctime().split()[1:3]) \
                                  + year,
                         parse_mode='HTML')

    elif text == 'Search':
        for v in buttonsList[orig_req][text]:
            markup.add(types.InlineKeyboardButton(text=translator(v) if LANGUAGE == '–†—É—Å—Å–∫–∏–π' else v,
                                                  callback_data=v + '_button'))
        return markup

    elif text == 'Search by current date_button':
        answer = 'The request is being executed...'
        # th = Thread(target=animation_bar, args=(translator(answer)))
        # th.start()
        # send_message = bot.send_message(chat_id=CHAT_ID,
        #                                 text=get_holidays(lang=LANGUAGE))
        # send_message
        # th.join()
        args_thread = {'message': message,}
        args_over = {'chat_id': CHAT_ID, 'text': {get_holidays : LANGUAGE}}
        # dump = json.load(args_over)
        # print(dump)
        threading_load(thread=(animation_bar, args_thread),
                       over=(bot.send_message, args_over)
                       )


        # bot.send_message(chat_id=CHAT_ID,
        #                  text=keyboard_translator(text.split('_')[0]),
        #                  reply_markup=makeKeyboard(finish=True),
        #                  parse_mode='HTML')


    elif text == 'Search by the specified date_button':
        answer = 'Enter the month and date in a format that is convenient for you'
        bot.send_message(chat_id=CHAT_ID,
                         text=translator(answer) if LANGUAGE == '–†—É—Å—Å–∫–∏–π' else answer)
        bot.register_next_step_handler(message, process_date_step)


def process_date_step(message):
    format_date = regex_date(message.text)
    bot.send_message(chat_id=CHAT_ID,
                     text=get_holidays(lang=LANGUAGE,
                                       date=format_date)
                     )
    answer = "What\'s next?"
    bot.send_message(chat_id=CHAT_ID,
                     text=translator(answer),
                     reply_markup=makeKeyboard(finish=True),
                     parse_mode='HTML')


# –≥–ª–∞–≤–Ω–Ω–æ–µ –º–µ–Ω—é/–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@bot.message_handler(commands=['start'])
def handle_command_adminwindow(message):
    global CHAT_ID
    CHAT_ID = message.chat.id
    bot.send_message(chat_id=CHAT_ID,
                     text="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É" if LANGUAGE == '–†—É—Å—Å–∫–∏–π'
                     else "Choose the desired setting",
                     reply_markup=makeKeyboard(),
                     parse_mode='HTML')


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@bot.message_handler()
def handle_message_from_callback(message, reply_markup_text=None, reply_markup_req=None):
    finish_trigger_list = [  # –∫–Ω–æ–ø–∫–∏, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ –º–µ–Ω—é
        'Current date', 'Change the date','–†—É—Å—Å–∫–∏–π',
        'Inglish','Search by current date', 'Search by the specified date'
    ]
    answer = reply_markup_text.split('_')[0]
    if answer not in finish_trigger_list:
        if keyboard_translator(reply_markup_text):
            bot.send_message(chat_id=CHAT_ID,
                             text=keyboard_translator(reply_markup_text),
                             reply_markup=makeKeyboard(text=reply_markup_text,
                                                       orig_req=reply_markup_req,
                                                       message=message),
                             parse_mode='HTML')

        else:
            bot.send_message(chat_id=CHAT_ID,
                             text=keyboard_translator(answer),
                             reply_markup=makeKeyboard(text=reply_markup_text,
                                                       orig_req=reply_markup_req,
                                                       message=message),
                             parse_mode='HTML')
    else:   # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å –≤ –ª–∏—Å—Ç–µ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫, —Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ –º–µ–Ω—é
       makeKeyboard(text=reply_markup_text,
                    message=message)




# —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if type(buttonsList[call.data]) == dict:
        answer = key_from_dict(buttonsList[call.data])
    else:
        if buttonsList[call.data]:
            answer = buttonsList[call.data]
        else:
            answer = call.data

    bot.delete_message(chat_id=CHAT_ID,
                       message_id=call.message.message_id,
                       )

    handle_message_from_callback(call.message, reply_markup_text=answer,
                                 reply_markup_req=call.data)


def language_date():
    # if lang == 'ru':
    dt = datetime.today().ctime().split()[1:3]
    if 'Jan' in dt:
        return dt[1], '—è–Ω–≤–∞—Ä—è'
    elif 'Feb' in dt:
        return dt[1], '—Ñ–µ–≤—Ä–∞–ª—è'
    elif 'Mar' in dt:
        return dt[1], '–º–∞—Ä—Ç–∞'
    elif 'Apr' in dt:
        return dt[1], '–∞–ø—Ä–µ–ª—è'
    elif 'May' in dt:
        return dt[1], '–º–∞—è'
    elif 'Jun' in dt:
        return dt[1], '–∏—é–Ω—è'
    elif 'Jul' in dt:
        return dt[1], '–∏—é–ª—è'
    elif 'Aug' in dt:
        return dt[1], '–∞–≤–≥—É—Å—Ç–∞'
    elif 'Sep' in dt:
        return dt[1], '—Å–µ–Ω—Ç—è–±—Ä—è'
    elif 'Oct' in dt:
        return dt[1], '–æ–∫—Ç—è–±—Ä—è'
    elif 'Nov' in dt:
        return dt[1], '–Ω–æ—è–±—Ä—è'
    elif 'Dec' in dt:
        return dt[1], '–¥–µ–∫–∞–±—Ä—è'
    else:
        print('Uncorrect date')


while True:
    bot.polling()
    try:
        bot.polling(none_stop=True, interval=0, timeout=0)
    except:
        time.sleep(10)
